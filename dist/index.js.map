{"version":3,"sources":["libs/camelcase.js","index.js"],"names":["module","exports","str","strOut","toLowerCase","replace","match","toUpperCase","camelcase","require","codeMap","Map","HttpResponder","Error","constructor","statusCodeOrMessage","errorOrOptions","Object","assign","_isHttpRes","statusCode","message","undefined","status","code","statusDesc","has","get","statusText","body","data","payload","self","length","log","console","JSON","stringify","_","appendError","err","end","res","json","send","improve","isHR","build","forEach","value","key","msgOrData","String"],"mappings":"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","file":"index.js","sourceRoot":"../src","sourcesContent":["/**\n * @function camelcase takes a string and returns its camelcased form.\n * @param str: string to transform.\n */\nmodule.exports = function (str) {\n\tlet strOut = str.toLowerCase();\n\tstrOut = strOut.replace(/\\W([a-z])/g, match => match.toUpperCase());\n\tstrOut = strOut.replace(/\\W/gi, '');\n\treturn strOut;\n};\n","'use strict';\n\nconst camelcase = require('./libs/camelcase');\n\n\n/**\n * @param codeMap - a complete map of status codes.\n */\nconst codeMap = new Map([\n\t[100, `Continue`],\n\t[101, `Switching Protocols`],\n\t[102, `Processing`],\n\t[103, `Early Hints`],\n\t[200, `OK`],\n\t[201, `Created`],\n\t[202, `Accepted`],\n\t[203, `Non-Authoritative Information`],\n\t[204, `No Content`],\n\t[205, `Reset Content`],\n\t[206, `Partial Content`],\n\t[207, `Multi-Status`],\n\t[208, `Already Reported`],\n\t[226, `IM Used`],\n\t[300, `Multiple Choices`],\n\t[301, `Moved Permanently`],\n\t[302, `Found`],\n\t[303, `See Other`],\n\t[304, `Not Modified`],\n\t[305, `Use Proxy`],\n\t[306, `Switch Proxy`],\n\t[307, `Temporary Redirect`],\n\t[308, `Permanent Redirect`],\n\t[400, `Bad Request`],\n\t[401, `Unauthorized`],\n\t[402, `Payment Required`],\n\t[403, `Forbidden`],\n\t[404, `Not Found`],\n\t[405, `Method Not Allowed`],\n\t[406, `Not Acceptable`],\n\t[407, `Proxy Authentication Required`],\n\t[408, `Request Time-out`],\n\t[409, `Conflict`],\n\t[410, `Gone`],\n\t[411, `Length Required`],\n\t[412, `Precondition Failed`],\n\t[413, `Payload Too Large`],\n\t[414, `URI Too Long`],\n\t[415, `Unsupported Media Type`],\n\t[416, `Requested Range Not Satisfiable`],\n\t[417, `Expectation Failed`],\n\t[418, `I Am A Teapot`],\n\t[421, `Misdirected Request`],\n\t[422, `Unprocessable Entity`],\n\t[423, `Locked`],\n\t[424, `Failed Dependency`],\n\t[425, `Unordered Collection`],\n\t[426, `Upgrade Required`],\n\t[428, `Precondition Required`],\n\t[429, `Too Many Requests`],\n\t[431, `Request Header Fields Too Large`],\n\t[451, `Unavailable For Legal Reasons`],\n\t[499, `Client Closed Request`],\n\t[500, `Internal Server Error`],\n\t[501, `Not Implemented`],\n\t[502, `Bad Gateway`],\n\t[503, `Service Unavailable`],\n\t[504, `Gateway Time-out`],\n\t[505, `HTTP Version Not Supported`],\n\t[506, `Variant Also Negotiates`],\n\t[507, `Insufficient Storage`],\n\t[509, `Bandwidth Limit Exceeded`],\n\t[510, `Not Extended`],\n\t[511, `Network Authentication Required`],\n\t[598, `Network Read Timeout Error`], // Informal convention\n\t[599, `Network Connect Timeout Error`]\n]);\n\n/**\n * @class HttpResponder - a class containing all static\n * functions that create the responses, with getters and\n * setters.\n */\nclass HttpResponder extends Error {\n\tconstructor(statusCodeOrMessage = 500, errorOrOptions = {}) {\n\t\tsuper();\n\t\tObject.assign(this, errorOrOptions);\n\t\tthis._isHttpRes = true;\n\t\tif (typeof statusCodeOrMessage === 'number') {\n\t\t\tthis.statusCode = statusCodeOrMessage;\n\t\t\tthis.message = (errorOrOptions.message) ?\n\t\t\t\terrorOrOptions.message : undefined;\n\t\t} else if (typeof statusCodeOrMessage === 'string') {\n\t\t\tthis.message = statusCodeOrMessage;\n\t\t\tthis.statusCode = errorOrOptions.statusCode ||\n\t\t\t\terrorOrOptions.status ||\n\t\t\t\t500;\n\t\t} else throw new Error(\n\t\t\t'The first parameter must be either a number or a string.'\n\t\t);\n\t}\n\n\t/** Getters and setters */\n\tget status() {\n\t\treturn this.statusCode;\n\t}\n\tset status(code) {\n\t\tthis.statusCode = code;\n\t}\n\tget statusDesc() {\n\t\treturn (codeMap.has(this.statusCode)) ?\n\t\t\tcodeMap.get(this.statusCode) : 'Unknown Status Code';\n\t}\n\t// set statusDesc(_) {\n\t// \tthrow new Error('This property is read-only.');\n\t// }\n\tget statusText() {\n\t\treturn this.statusDesc;\n\t}\n\t// set statusText(_) {\n\t// \tthrow new Error('This property is read-only.');\n\t// }\n\tget body() {\n\t\treturn this.data;\n\t}\n\tset body(data) {\n\t\tthis.data = data;\n\t}\n\tget payload() {\n\t\tconst self = this;\n\t\treturn {\n\t\t\tstatusCode: self.statusCode,\n\t\t\tstatusDesc: self.statusDesc,\n\t\t\tmessage: (self.message && self.message.length) ? self.message : undefined,\n\t\t\tdata: (self.data) ? self.data : undefined,\n\t\t\tlog: () => console.log(JSON.stringify(self.payload))\n\t\t};\n\t}\n\tset payload(_) {\n\t\tthrow new Error('This property is read-only.');\n\t}\n\n\t/** Append new responses to the exisisting HttpResponse */\n\tappendError(err) {\n\t\treturn Object.assign(this, err);\n\t}\n\t/** Return a response to the client (express 4.x) */\n\tend(res) {\n\t\treturn res.status(this.statusCode).json(this.payload);\n\t}\n\tsend(res) {\n\t\treturn this.end(res);\n\t}\n\tjson(res) {\n\t\treturn this.end(res);\n\t}\n\tlog() {\n\t\tconsole.log(JSON.stringify(this));\n\t}\n\n\t/** Static functions */\n\tstatic improve(err) {\n\t\treturn new HttpResponder(500, err);\n\t}\n\tstatic isHR(res) {\n\t\treturn ((res.constructor === HttpResponder) && res._isHttpRes);\n\t}\n}\n\n/**\n * @function build - adds dynamically all of the codeMap's\n * values as functions.\n * @returns HttpResponder - the class with all static functions\n * attached.\n */\nconst build = () => {\n\tcodeMap.forEach((value, key) => {\n\t\tHttpResponder[camelcase(value)] = function (msgOrData, data) {\n\t\t\treturn new HttpResponder(key, {\n\t\t\t\tstatusCode: key,\n\t\t\t\tmessage: (msgOrData && msgOrData.constructor === String && msgOrData.length) ?\n\t\t\t\t\tmsgOrData : undefined,\n\t\t\t\tdata: (msgOrData && msgOrData.constructor !== String) ? msgOrData : data\n\t\t\t});\n\t\t}\n\t});\n\treturn HttpResponder;\n}\n\nmodule.exports = build();\n"]}